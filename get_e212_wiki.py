from bs4 import BeautifulSoup
from collections import defaultdict
import requests
from phone_iso3166.country import network_country
from phone_iso3166.errors import InvalidNetwork
from io import StringIO
from pprint import pformat


names_out_file = 'phone_iso3166/e212_names.py'
html = requests.get('https://en.wikipedia.org/wiki/Mobile_country_code')
soup = BeautifulSoup(html.content, 'html.parser')
networkdict = defaultdict(lambda: defaultdict(tuple))

for row in soup.find_all('table', {'class': 'wikitable'}):
    rows = row.find_all('td')
    mnc_info = [rows[x:x + 7] for x in range(0, len(rows), 7)]
    for info in mnc_info:
        try:
            mcc = int(info[0].text)
            mnc = int(info[1].text)
            operator_name = info[3].text
            country_code = network_country(mcc, mnc)
            if info[4].text != 'Not operational':
                networkdict[mcc][mnc] = (country_code, operator_name)
        except (ValueError, InvalidNetwork):
            # Skip empty tables
            pass


# Turn in to regular dict so it can be written.
operators = {k: dict(v) for k, v in networkdict.items()}

# Collect all MNC/MCC pairs under country code.
countriesdict = defaultdict(list)
for mcc, mncs in operators.items():
    for mnc, c in mncs.items():
        countriesdict[c[0]].append((mcc, mnc))
countriesdict = {k: v for k, v in countriesdict.items()}


e212_complementary = StringIO()
oprmap = StringIO()
oprmap.write('#!/usr/bin/env python\n')
oprmap.write('# -*- coding: utf-8 -*-\n\n')
oprmap.write('# Generated by get_e212.py\n')
oprmap.write('# Based on https://en.wikipedia.org/wiki/Mobile_country_code\n')
oprmap.write('operators = \\\n')
oprmap.write(pformat(operators))
oprmap.write('\n\n\ncountries = \\\n')
oprmap.write(pformat(countriesdict))

with open(names_out_file, 'w') as f:
    f.write(oprmap.getvalue() + '\n')
print('Wrote ' + names_out_file)
